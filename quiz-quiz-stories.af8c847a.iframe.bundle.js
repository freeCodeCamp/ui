"use strict";(self.webpackChunk_freecodecamp_ui=self.webpackChunk_freecodecamp_ui||[]).push([[226],{"./src/quiz/quiz.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithCorrectAnswersShownOnSuccess:()=>WithCorrectAnswersShownOnSuccess,WithValidation:()=>WithValidation,WithValidationAndAnswerFeedback:()=>WithValidationAndAnswerFeedback,__namedExportsOrder:()=>__namedExportsOrder,default:()=>quiz_stories});var react=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/index.js"),quiz_question=__webpack_require__("./src/quiz-question/quiz-question.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const Quiz=_ref=>{let{questions,disabled,required}=_ref;return react.createElement("ul",{className:"flex flex-col gap-y-[48px] list-none"},questions.map(((question,index)=>react.createElement("li",{key:index},react.createElement(quiz_question.a,_extends({},question,{position:index+1,disabled,required}))))))};try{Quiz.displayName="Quiz",Quiz.__docgenInfo={description:"",displayName:"Quiz",props:{questions:{defaultValue:null,description:"",name:"questions",required:!0,type:{name:"Question<AnswerT>[]"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}},required:{defaultValue:null,description:"",name:"required",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quiz/quiz.tsx#Quiz"]={docgenInfo:Quiz.__docgenInfo,name:"Quiz",path:"src/quiz/quiz.tsx#Quiz"})}catch(__react_docgen_typescript_loader_error){}const useQuiz=_ref=>{let{initialQuestions,validationMessages,onSuccess,onFailure,passingPercent,showCorrectAnswersOnSuccess}=_ref;const[questions,setQuestions]=(0,react.useState)(initialQuestions),[validation,setValidation]=(0,react.useState)({validated:!1});return{questions:questions.map(((question,index)=>({...question,onChange:selectedAnswer=>{setQuestions((prevQuestions=>prevQuestions.map(((prevQuestion,prevIndex)=>prevIndex===index?{...prevQuestion,selectedAnswer}:prevQuestion))))}}))),validateAnswers:()=>{setQuestions((prevQuestion=>{const correctCount=prevQuestion.filter((_ref2=>{let{selectedAnswer,correctAnswer}=_ref2;return selectedAnswer===correctAnswer})).length,grade=parseFloat((correctCount/initialQuestions.length*100).toFixed(2)),updatedQuestions=prevQuestion.map((question=>{const answersWithValidation=question.answers.map((answer=>{let validation;return answer.value===question.selectedAnswer?validation=answer.value===question.correctAnswer?{state:"correct",message:validationMessages.correct}:{state:"incorrect",message:validationMessages.incorrect}:answer.value===question.correctAnswer&&grade>=passingPercent&&showCorrectAnswersOnSuccess&&(validation={state:"correct",message:validationMessages.correct}),{...answer,validation}}));return{...question,answers:answersWithValidation}}));return setValidation({validated:!0,grade,correctAnswerCount:correctCount}),grade>=passingPercent?onSuccess&&onSuccess():onFailure&&onFailure(),updatedQuestions}))},...validation}};var src_button=__webpack_require__("./src/button/index.ts"),spacer=__webpack_require__("./src/spacer/index.ts"),prism_formatted=__webpack_require__("./src/prism-formatted/index.ts");const Default={render:()=>{const{questions}=useQuiz({initialQuestions:[{question:"Lorem ipsum dolor sit amet",answers:[{label:"Option 1",value:1},{label:"Option 2",value:2},{label:"Option 3",value:3}],correctAnswer:1},{question:"Consectetur adipiscing elit",answers:[{label:"Option 1",value:1},{label:"Option 2",value:2},{label:"Option 3",value:3}],correctAnswer:2},{question:"Fugit itaque delectus voluptatem alias aliquid",answers:[{label:"Option 1",value:1},{label:"Option 2",value:2},{label:"Option 3",value:3}],correctAnswer:3}],validationMessages:{correct:"Correct.",incorrect:"Incorrect."},passingPercent:100});return react.createElement(Quiz,{questions})},args:{},parameters:{docs:{source:{code:'\nimport { Quiz, useQuiz } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n    question: "Lorem ipsum dolor sit amet",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 1,\n  },\n  {\n    question: "Consectetur adipiscing elit",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 2,\n  },\n  {\n    question: "Fugit itaque delectus voluptatem alias aliquid",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 3,\n  },\n];\n\nconst App = () => {\n  const { questions } = useQuiz({\n    initialQuestions,\n    validationMessages: {\n      correct: "Correct",\n      incorrect: "Incorrect",\n      },\n    });\n\n  return <Quiz questions={questions} />;\n};'}}}},WithValidation={render:()=>{const{questions,validateAnswers,correctAnswerCount}=useQuiz({initialQuestions:[{question:"Lorem ipsum dolor sit amet",answers:[{label:"Option 1",value:1},{label:"Option 2",value:2},{label:"Option 3",value:3}],correctAnswer:1},{question:"Consectetur adipiscing elit",answers:[{label:"Option 1",value:1},{label:"Option 2",value:2},{label:"Option 3",value:3}],correctAnswer:2},{question:"Fugit itaque delectus voluptatem alias aliquid",answers:[{label:"Option 1",value:1},{label:"Option 2",value:2},{label:"Option 3",value:3}],correctAnswer:3}],validationMessages:{correct:"Correct.",incorrect:"Incorrect."},passingPercent:80}),[disabled,setDisabled]=(0,react.useState)(!1);return react.createElement("div",null,react.createElement("div",{"aria-live":"polite"},!!correctAnswerCount&&react.createElement("p",{className:"text-foreground-primary"},"Correct answers: ",correctAnswerCount)),react.createElement(Quiz,{questions,disabled}),react.createElement(spacer.h,{size:"m"}),react.createElement(src_button.$,{onClick:()=>{validateAnswers(),setDisabled(!0)}},"Submit"))},args:{},parameters:{docs:{source:{code:'\nimport { Quiz, useQuiz, Button, Spacer } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n    question: "Lorem ipsum dolor sit amet",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 1,\n  },\n  {\n    question: "Consectetur adipiscing elit",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 2,\n  },\n  {\n    question: "Fugit itaque delectus voluptatem alias aliquid",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 3,\n  },\n];\n\nconst App = () => {\n  const { questions, validateAnswers } = useQuiz({\n      initialQuestions,\n    validationMessages: {\n      correct: "Correct",\n      incorrect: "Incorrect",\n      },\n    });\n\n  const [disabled, setDisabled] = useState(false);\n\n  const handleSubmit = () => {\n    validateAnswers();\n    setDisabled(true);\n  };\n\n  return (\n    <div>\n      <div aria-live="polite">\n                {!!correctAnswerCount && (\n                    <p className="text-foreground-primary">\n                        Correct answers: {correctAnswerCount}\n                    </p>\n                )}\n            </div>\n      <Quiz questions={questions} disabled={disabled} />\n      <Spacer size="m" />\n      <Button onClick={handleSubmit}>Submit</Button>\n    </div>\n  );\n};'}}}},WithValidationAndAnswerFeedback={render:()=>{const initialQuestions=[{question:"Lorem ipsum dolor sit amet",answers:[{label:"Option 1",value:1,feedback:react.createElement(prism_formatted.C,{text:"<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>",getCodeBlockAriaLabel:codeName=>`${codeName} code example`})},{label:"Option 2",value:2,feedback:"Recusandae necessitatibus consequatur voluptatem sapiente."},{label:"Option 3",value:3,feedback:"Voluptas et et animi quo."}],correctAnswer:1},{question:"Consectetur adipiscing elit",answers:[{label:"Option 1",value:1,feedback:react.createElement(prism_formatted.C,{text:"<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>",getCodeBlockAriaLabel:codeName=>`${codeName} code example`})},{label:"Option 2",value:2,feedback:"Recusandae necessitatibus consequatur voluptatem sapiente."},{label:"Option 3",value:3,feedback:"Voluptas et et animi quo."}],correctAnswer:2},{question:"Fugit itaque delectus voluptatem alias aliquid",answers:[{label:"Option 1",value:1,feedback:react.createElement(prism_formatted.C,{text:"<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>",getCodeBlockAriaLabel:codeName=>`${codeName} code example`})},{label:"Option 2",value:2,feedback:"Recusandae necessitatibus consequatur voluptatem sapiente."},{label:"Option 3",value:3,feedback:"Voluptas et et animi quo."}],correctAnswer:3}],{questions,validateAnswers,correctAnswerCount}=useQuiz({initialQuestions,validationMessages:{correct:"Correct.",incorrect:"Incorrect."},passingPercent:100}),[disabled,setDisabled]=(0,react.useState)(!1);return react.createElement("div",null,react.createElement("div",{"aria-live":"polite"},!!correctAnswerCount&&react.createElement("p",{className:"text-foreground-primary"},"Correct answers: ",correctAnswerCount)),react.createElement(Quiz,{questions,disabled}),react.createElement(spacer.h,{size:"m"}),react.createElement(src_button.$,{onClick:()=>{validateAnswers(),setDisabled(!0)}},"Submit"))},args:{},parameters:{docs:{source:{code:'\nimport { Quiz, useQuiz, Button, Spacer } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n        question: "Lorem ipsum dolor sit amet",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>`}\n                        getCodeBlockAriaLabel={(codeName) => `${codeName} code example`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 1,\n    },\n    {\n        question: "Consectetur adipiscing elit",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>`}\n                        getCodeBlockAriaLabel={(codeName) => `${codeName} code example`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 2,\n    },\n    {\n        question: "Fugit itaque delectus voluptatem alias aliquid",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>`}\n                        getCodeBlockAriaLabel={(codeName) => `${codeName} code example`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 3,\n    },\n];\n\nconst App = () => {\n  const { questions, validateAnswers } = useQuiz({\n      initialQuestions,\n    validationMessages: {\n      correct: "Correct.",\n      incorrect: "Incorrect.",\n      },\n    });\n\n  const [disabled, setDisabled] = useState(false);\n\n  const handleSubmit = () => {\n    validateAnswers();\n    setDisabled(true);\n  };\n\n  return (\n    <div>\n      <div aria-live="polite">\n                {!!correctAnswerCount && (\n                    <p className="text-foreground-primary">\n                        Correct answers: {correctAnswerCount}\n                    </p>\n                )}\n            </div>\n      <Quiz questions={questions} disabled={disabled} />\n      <Spacer size="m" />\n      <Button onClick={handleSubmit}>Submit</Button>\n    </div>\n  );\n};'}}}},WithCorrectAnswersShownOnSuccess={render:()=>{const initialQuestions=[{question:"Lorem ipsum dolor sit amet",answers:[{label:"Option 1",value:1,feedback:react.createElement(prism_formatted.C,{text:"<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>",getCodeBlockAriaLabel:codeName=>`${codeName} code example`})},{label:"Option 2",value:2,feedback:"Recusandae necessitatibus consequatur voluptatem sapiente."},{label:"Option 3",value:3,feedback:"Voluptas et et animi quo."}],correctAnswer:1},{question:"Consectetur adipiscing elit",answers:[{label:"Option 1",value:1,feedback:react.createElement(prism_formatted.C,{text:"<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>",getCodeBlockAriaLabel:codeName=>`${codeName} code example`})},{label:"Option 2",value:2,feedback:"Recusandae necessitatibus consequatur voluptatem sapiente."},{label:"Option 3",value:3,feedback:"Voluptas et et animi quo."}],correctAnswer:2},{question:"Fugit itaque delectus voluptatem alias aliquid",answers:[{label:"Option 1",value:1,feedback:react.createElement(prism_formatted.C,{text:"<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>",getCodeBlockAriaLabel:codeName=>`${codeName} code example`})},{label:"Option 2",value:2,feedback:"Recusandae necessitatibus consequatur voluptatem sapiente."},{label:"Option 3",value:3,feedback:"Voluptas et et animi quo."}],correctAnswer:3}],{questions,validateAnswers,correctAnswerCount}=useQuiz({initialQuestions,validationMessages:{correct:"Correct.",incorrect:"Incorrect."},passingPercent:50,showCorrectAnswersOnSuccess:!0}),[disabled,setDisabled]=(0,react.useState)(!1);return react.createElement("div",null,react.createElement("div",{"aria-live":"polite"},!!correctAnswerCount&&react.createElement("p",{className:"text-foreground-primary"},"Correct answers: ",correctAnswerCount)),react.createElement(Quiz,{questions,disabled}),react.createElement(spacer.h,{size:"m"}),react.createElement(src_button.$,{onClick:()=>{validateAnswers(),setDisabled(!0)}},"Submit"))},args:{},parameters:{docs:{source:{code:'\nimport { Quiz, useQuiz, Button, Spacer } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n        question: "Lorem ipsum dolor sit amet",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>`}\n                        getCodeBlockAriaLabel={(codeName) => `${codeName} code example`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 1,\n    },\n    {\n        question: "Consectetur adipiscing elit",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>`}\n                        getCodeBlockAriaLabel={(codeName) => `${codeName} code example`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 2,\n    },\n    {\n        question: "Fugit itaque delectus voluptatem alias aliquid",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>`}\n                        getCodeBlockAriaLabel={(codeName) => `${codeName} code example`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 3,\n    },\n];\n\nconst App = () => {\n  const { questions, validateAnswers } = useQuiz({\n      initialQuestions,\n    validationMessages: {\n      correct: "Correct.",\n      incorrect: "Incorrect.",\n      },\n        passingPercent: 50,\n        showCorrectAnswersOnSuccess: true\n    });\n\n  const [disabled, setDisabled] = useState(false);\n\n  const handleSubmit = () => {\n    validateAnswers();\n    setDisabled(true);\n  };\n\n  return (\n    <div>\n      <div aria-live="polite">\n                {!!correctAnswerCount && (\n                    <p className="text-foreground-primary">\n                        Correct answers: {correctAnswerCount}\n                    </p>\n                )}\n            </div>\n      <Quiz questions={questions} disabled={disabled} />\n      <Spacer size="m" />\n      <Button onClick={handleSubmit}>Submit</Button>\n    </div>\n  );\n};'}}}},quiz_stories={title:"Components/Quiz",component:Quiz},__namedExportsOrder=["Default","WithValidation","WithValidationAndAnswerFeedback","WithCorrectAnswersShownOnSuccess"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  render: QuizDefault,\n  args: {},\n  parameters: {\n    docs: {\n      source: {\n        code: `\nimport { Quiz, useQuiz } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n    question: "Lorem ipsum dolor sit amet",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 1,\n  },\n  {\n    question: "Consectetur adipiscing elit",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 2,\n  },\n  {\n    question: "Fugit itaque delectus voluptatem alias aliquid",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 3,\n  },\n];\n\nconst App = () => {\n  const { questions } = useQuiz({\n    initialQuestions,\n    validationMessages: {\n      correct: "Correct",\n      incorrect: "Incorrect",\n      },\n    });\n\n  return <Quiz questions={questions} />;\n};`\n      }\n    }\n  }\n}',...Default.parameters?.docs?.source}}},WithValidation.parameters={...WithValidation.parameters,docs:{...WithValidation.parameters?.docs,source:{originalSource:'{\n  render: QuizWithValidation,\n  args: {},\n  parameters: {\n    docs: {\n      source: {\n        code: `\nimport { Quiz, useQuiz, Button, Spacer } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n    question: "Lorem ipsum dolor sit amet",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 1,\n  },\n  {\n    question: "Consectetur adipiscing elit",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 2,\n  },\n  {\n    question: "Fugit itaque delectus voluptatem alias aliquid",\n    answers: [\n      { label: "Option 1", value: 1 },\n      { label: "Option 2", value: 2 },\n      { label: "Option 3", value: 3 },\n    ],\n    correctAnswer: 3,\n  },\n];\n\nconst App = () => {\n  const { questions, validateAnswers } = useQuiz({\n      initialQuestions,\n    validationMessages: {\n      correct: "Correct",\n      incorrect: "Incorrect",\n      },\n    });\n\n  const [disabled, setDisabled] = useState(false);\n\n  const handleSubmit = () => {\n    validateAnswers();\n    setDisabled(true);\n  };\n\n  return (\n    <div>\n      <div aria-live="polite">\n                {!!correctAnswerCount && (\n                    <p className="text-foreground-primary">\n                        Correct answers: {correctAnswerCount}\n                    </p>\n                )}\n            </div>\n      <Quiz questions={questions} disabled={disabled} />\n      <Spacer size="m" />\n      <Button onClick={handleSubmit}>Submit</Button>\n    </div>\n  );\n};`\n      }\n    }\n  }\n}',...WithValidation.parameters?.docs?.source}}},WithValidationAndAnswerFeedback.parameters={...WithValidationAndAnswerFeedback.parameters,docs:{...WithValidationAndAnswerFeedback.parameters?.docs,source:{originalSource:'{\n  render: QuizWithValidationAndAnswerFeedback,\n  args: {},\n  parameters: {\n    docs: {\n      source: {\n        code: `\nimport { Quiz, useQuiz, Button, Spacer } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n        question: "Lorem ipsum dolor sit amet",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={\\`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>\\`}\n                        getCodeBlockAriaLabel={(codeName) => \\`\\${codeName} code example\\`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 1,\n    },\n    {\n        question: "Consectetur adipiscing elit",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={\\`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>\\`}\n                        getCodeBlockAriaLabel={(codeName) => \\`\\${codeName} code example\\`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 2,\n    },\n    {\n        question: "Fugit itaque delectus voluptatem alias aliquid",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={\\`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>\\`}\n                        getCodeBlockAriaLabel={(codeName) => \\`\\${codeName} code example\\`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 3,\n    },\n];\n\nconst App = () => {\n  const { questions, validateAnswers } = useQuiz({\n      initialQuestions,\n    validationMessages: {\n      correct: "Correct.",\n      incorrect: "Incorrect.",\n      },\n    });\n\n  const [disabled, setDisabled] = useState(false);\n\n  const handleSubmit = () => {\n    validateAnswers();\n    setDisabled(true);\n  };\n\n  return (\n    <div>\n      <div aria-live="polite">\n                {!!correctAnswerCount && (\n                    <p className="text-foreground-primary">\n                        Correct answers: {correctAnswerCount}\n                    </p>\n                )}\n            </div>\n      <Quiz questions={questions} disabled={disabled} />\n      <Spacer size="m" />\n      <Button onClick={handleSubmit}>Submit</Button>\n    </div>\n  );\n};`\n      }\n    }\n  }\n}',...WithValidationAndAnswerFeedback.parameters?.docs?.source}}},WithCorrectAnswersShownOnSuccess.parameters={...WithCorrectAnswersShownOnSuccess.parameters,docs:{...WithCorrectAnswersShownOnSuccess.parameters?.docs,source:{originalSource:'{\n  render: QuizWithCorrectAnswersShownOnSuccess,\n  args: {},\n  parameters: {\n    docs: {\n      source: {\n        code: `\nimport { Quiz, useQuiz, Button, Spacer } from \'@freecodecamp/ui\';\n\nconst initialQuestions = [\n  {\n        question: "Lorem ipsum dolor sit amet",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={\\`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>\\`}\n                        getCodeBlockAriaLabel={(codeName) => \\`\\${codeName} code example\\`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 1,\n    },\n    {\n        question: "Consectetur adipiscing elit",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={\\`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>\\`}\n                        getCodeBlockAriaLabel={(codeName) => \\`\\${codeName} code example\\`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 2,\n    },\n    {\n        question: "Fugit itaque delectus voluptatem alias aliquid",\n        answers: [\n            {\n                label: "Option 1",\n                value: 1,\n                feedback: (\n                    <PrismFormatted\n                        text={\\`<p>Quaerat in autem sapiente illum. Vel mollitia omnis qui dolorem <code>um</code> esse eos maiores possimus. Est laborum quam aliquam qui sunt. Ut ea et qui provident voluptatibus. Eius quam odit sint cumque sint. Corporis quia et dicta.</p>\\`}\n                        getCodeBlockAriaLabel={(codeName) => \\`\\${codeName} code example\\`}\n                    />\n                ),\n            },\n            {\n                label: "Option 2",\n                value: 2,\n                feedback:\n                    "Recusandae necessitatibus consequatur voluptatem sapiente.",\n            },\n            { label: "Option 3", value: 3, feedback: "Voluptas et et animi quo." },\n        ],\n        correctAnswer: 3,\n    },\n];\n\nconst App = () => {\n  const { questions, validateAnswers } = useQuiz({\n      initialQuestions,\n    validationMessages: {\n      correct: "Correct.",\n      incorrect: "Incorrect.",\n      },\n        passingPercent: 50,\n        showCorrectAnswersOnSuccess: true\n    });\n\n  const [disabled, setDisabled] = useState(false);\n\n  const handleSubmit = () => {\n    validateAnswers();\n    setDisabled(true);\n  };\n\n  return (\n    <div>\n      <div aria-live="polite">\n                {!!correctAnswerCount && (\n                    <p className="text-foreground-primary">\n                        Correct answers: {correctAnswerCount}\n                    </p>\n                )}\n            </div>\n      <Quiz questions={questions} disabled={disabled} />\n      <Spacer size="m" />\n      <Button onClick={handleSubmit}>Submit</Button>\n    </div>\n  );\n};`\n      }\n    }\n  }\n}',...WithCorrectAnswersShownOnSuccess.parameters?.docs?.source}}}},"./src/button/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>Button,Q:()=>HeadlessButton});var react=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const defaultClassNames=["relative","inline-block","mt-[0.5px]","border-solid","border-3","active:before:w-full","active:before:h-full","active:before:absolute","active:before:inset-0","active:before:border-3","active:before:border-transparent","active:before:bg-gray-900","active:before:opacity-20","text-center","cursor-pointer","no-underline"],StylessButton=react.forwardRef(((_ref2,ref)=>{let{className,onClick,disabled,children,type="button",...rest}=_ref2;return react.createElement("button",_extends({className,onClick:event=>{disabled?event.preventDefault():onClick&&onClick(event)},"aria-disabled":disabled,ref,type},rest),children)})),Link=react.forwardRef(((_ref3,ref)=>{let{className,href,download,target,children,...rest}=_ref3;return react.createElement("a",_extends({className,download,target,ref,href},rest),children)})),HeadlessButton=react.forwardRef(((_ref4,ref)=>{let{onClick,className,children,disabled,href,download,target,...rest}=_ref4;return href&&!disabled?react.createElement(Link,_extends({className,href,download,target,rel:"_blank"===target?"noopener noreferrer":"",ref,onClick},rest),children):react.createElement(StylessButton,_extends({className,onClick,disabled,ref},rest),children)})),Button=react.forwardRef(((_ref5,ref)=>{let{className,size="medium",disabled,variant="primary",block,...rest}=_ref5;const buttonStyle=[className,(0,react.useMemo)((()=>(_ref=>{let{size,variant,disabled,block}=_ref;const classNames=[...defaultClassNames];switch(block&&classNames.push("block","w-full"),variant){case"danger":classNames.push(...disabled?["border-gray-450","bg-background-danger-disabled","text-foreground-danger-disabled"]:["border-foreground-danger","bg-background-danger","text-foreground-danger","hover:bg-foreground-danger","hover:text-background-danger","hover:border-foreground-danger","dark:hover:bg-background-danger","dark:hover:text-foreground-danger"]);break;case"info":classNames.push("border-foreground-info","bg-background-info","text-foreground-info","hover:bg-foreground-info","hover:text-background-info","hover:border-foreground-info","dark:hover:bg-background-info","dark:hover:text-foreground-info");break;default:classNames.push("bg-background-quaternary","text-foreground-secondary",...disabled?["border-gray-450"]:["border-foreground-secondary","hover:bg-foreground-primary","hover:text-background-primary","hover:border-foreground-secondary","dark:hover:bg-background-primary","dark:hover:text-foreground-primary"])}switch(disabled&&classNames.push("active:before:hidden","aria-disabled:cursor-not-allowed","aria-disabled:opacity-80"),size){case"large":classNames.push("px-4 py-2.5 text-lg");break;case"small":classNames.push("px-2.5 py-1 text-sm");break;default:classNames.push("px-3 py-1.5 text-md")}return classNames.join(" ")})({size,variant,disabled,block})),[size,variant,disabled,block])].join(" ");return react.createElement(HeadlessButton,_extends({className:buttonStyle,ref,disabled},rest))}));Button.displayName="Button",HeadlessButton.displayName="HeadlessButton",StylessButton.displayName="StylessButton",Link.displayName="Link";try{HeadlessButton.displayName="Button",HeadlessButton.__docgenInfo={description:"",displayName:"Button",props:{variant:{defaultValue:{value:"primary"},description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"primary"'},{value:'"danger"'},{value:'"info"'}]}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:{value:"medium"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLAnchorElement | HTMLButtonElement> | undefined"}},type:{defaultValue:{value:"button"},description:"",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"submit"'}]}},block:{defaultValue:null,description:"",name:"block",required:!1,type:{name:"boolean | undefined"}},href:{defaultValue:null,description:"",name:"href",required:!1,type:{name:"string | undefined"}},download:{defaultValue:null,description:"",name:"download",required:!1,type:{name:"string | undefined"}},target:{defaultValue:null,description:"",name:"target",required:!1,type:{name:"HTMLAttributeAnchorTarget | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/button/button.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"src/button/button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}},"./src/prism-formatted/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{C:()=>_prism_formatted__WEBPACK_IMPORTED_MODULE_0__.C});var _prism_formatted__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/prism-formatted/prism-formatted.tsx")},"./src/quiz-question/quiz-question.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>QuizQuestion});var react=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/index.js"),radio_group=__webpack_require__("./node_modules/.pnpm/@headlessui+react@1.7.19_react-dom@16.14.0_react@16.14.0__react@16.14.0/node_modules/@headlessui/react/dist/components/radio-group/radio-group.js"),index_es=__webpack_require__("./node_modules/.pnpm/@fortawesome+react-fontawesome@0.2.6_@fortawesome+fontawesome-svg-core@6.7.2_react@16.14.0/node_modules/@fortawesome/react-fontawesome/index.es.js"),free_solid_svg_icons=__webpack_require__("./node_modules/.pnpm/@fortawesome+free-solid-svg-icons@6.7.2/node_modules/@fortawesome/free-solid-svg-icons/index.mjs");const radioIconDefaultClasses=["block","relative","w-[20px]","h-[20px]","bg-background-secondary","rounded-full","border-2","border-foreground-primary","me-[15px]","shrink-0"],radioIconActiveClasses=["outline","outline-3","outline-focus-outline-color","outline-offset-2"],radioIconCheckedClasses=["before:absolute","before:w-[10px]","before:h-[10px]","before:bg-foreground-primary","before:rounded-full","before:top-1/2","before:start-1/2","before:-translate-x-1/2","before:-translate-y-1/2"],radioOptionDefaultClasses=["focus:outline-none","cursor-pointer","p-[20px]","flex","items-center"],radioWrapperDefaultClasses=["flex","flex-col","border-x-4","border-t-4","last:border-b-4","border-background-tertiary","bg-background-primary"],RadioIcon=_ref=>{let{active,checked}=_ref,radioCls=[...radioIconDefaultClasses];return active&&(radioCls=radioCls.concat(radioIconActiveClasses)),checked&&(radioCls=radioCls.concat(radioIconCheckedClasses)),react.createElement("span",{className:radioCls.join(" ")})},ValidationMessage=_ref2=>{let{state,message}=_ref2;return"correct"===state?react.createElement("p",{className:"text-background-success"},react.createElement(index_es.g,{icon:free_solid_svg_icons.e68,className:"text-background-success me-[8px]"}),message):react.createElement("p",{className:"text-background-danger"},react.createElement(index_es.g,{icon:free_solid_svg_icons.Jyw,className:"text-background-danger me-[8px]"}),message)},Answer=_ref3=>{let{value,label,disabled,checked,validation,feedback}=_ref3;return react.createElement("div",{className:(()=>{const cls=[...radioWrapperDefaultClasses];return"correct"===validation?.state&&cls.push("border-l-background-success"),"incorrect"===validation?.state&&cls.push("border-l-background-danger"),cls.join(" ")})()},react.createElement(radio_group.z.Option,{key:value,value,"data-value":value,className:(()=>{const cls=[...radioOptionDefaultClasses];return disabled&&cls.push("aria-disabled:cursor-not-allowed","aria-disabled:opacity-80"),cls.join(" ")})()},(_ref4=>{let{active}=_ref4;return react.createElement(react.Fragment,null,react.createElement(RadioIcon,{active,checked:!!checked}),react.createElement(radio_group.z.Label,{className:"m-0 text-foreground-primary overflow-auto"},label))})),(!!validation||!!feedback)&&react.createElement("div",{className:"ps-[20px] pb-[20px] [&>p:last-child]:m-0"},validation&&react.createElement(ValidationMessage,{state:validation.state,message:validation.message}),feedback&&react.createElement("div",{className:"text-foreground-primary"},feedback)))};try{Answer.displayName="Answer",Answer.__docgenInfo={description:"",displayName:"Answer",props:{checked:{defaultValue:null,description:"",name:"checked",required:!1,type:{name:"boolean | undefined"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}},label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"ReactNode"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"string | number"}},feedback:{defaultValue:null,description:"",name:"feedback",required:!1,type:{name:"ReactNode"}},validation:{defaultValue:null,description:"Information needed to render the validation status",name:"validation",required:!1,type:{name:"QuizQuestionValidation | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quiz-question/answer.tsx#Answer"]={docgenInfo:Answer.__docgenInfo,name:"Answer",path:"src/quiz-question/answer.tsx#Answer"})}catch(__react_docgen_typescript_loader_error){}const QuestionText=_ref=>{let{question,position}=_ref;return null==position?react.createElement("span",{className:"text-foreground-primary"},question):react.createElement("span",{className:"text-foreground-primary flex"},react.createElement("span",null,position,".")," ",question)},QuizQuestion=_ref2=>{let{question,answers,required,disabled,selectedAnswer,onChange,position}=_ref2;return react.createElement(radio_group.z,{onChange:selectedOption=>{onChange&&onChange(selectedOption)},"aria-required":required,disabled,value:selectedAnswer??null},react.createElement(radio_group.z.Label,{className:"block mb-[20px]"},react.createElement(QuestionText,{question,position})),answers.map((_ref3=>{let{value,label,feedback,validation}=_ref3;const checked=selectedAnswer===value;return react.createElement(Answer,{key:value,value,label,feedback:checked&&validation&&feedback,checked,disabled,validation})})))};try{QuizQuestion.displayName="QuizQuestion",QuizQuestion.__docgenInfo={description:"QuizQuestion is a radio group that allows users to select a single option from a list of multiple options.\nThe component can be used as a standalone component or in a group of multiple questions.\n\nQuizQuestion does not track its selected option internally,\nbut instead, it provides a `selectedAnswer` and an `onChange` props,\ngiving the parent component full control over the selection handling logic.",displayName:"QuizQuestion",props:{question:{defaultValue:null,description:"Question text, can be plain text or contain code.\nIf the question text contains code, use the PrismFormatted component to ensure the code is rendered correctly.",name:"question",required:!0,type:{name:"ReactNode"}},answers:{defaultValue:null,description:"Answer options",name:"answers",required:!0,type:{name:"QuizQuestionAnswer<AnswerT>[]"}},position:{defaultValue:null,description:"Position of the question amongst its siblings",name:"position",required:!1,type:{name:"number | undefined"}},required:{defaultValue:null,description:"Whether the question is required",name:"required",required:!1,type:{name:"boolean | undefined"}},disabled:{defaultValue:null,description:"Whether the question is disabled",name:"disabled",required:!1,type:{name:"boolean | undefined"}},selectedAnswer:{defaultValue:null,description:"Value of the selected answer",name:"selectedAnswer",required:!1,type:{name:"string | number | undefined"}},onChange:{defaultValue:null,description:"Change event handler, called when an answer is selected",name:"onChange",required:!1,type:{name:"((selectedAnswer: AnswerT) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/quiz-question/quiz-question.tsx#QuizQuestion"]={docgenInfo:QuizQuestion.__docgenInfo,name:"QuizQuestion",path:"src/quiz-question/quiz-question.tsx#QuizQuestion"})}catch(__react_docgen_typescript_loader_error){}},"./src/spacer/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>_spacer__WEBPACK_IMPORTED_MODULE_0__.h});var _spacer__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/spacer/spacer.tsx")},"./src/spacer/spacer.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>Spacer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/index.js");const sizes={xxs:"h-[5px]",xs:"h-[10px]",s:"h-[20px]",m:"h-[30px]",l:"h-[60px]",xl:"h-[90px]",xxl:"h-[180px]"},Spacer=_ref=>{let{size}=_ref;return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:sizes[size]})};try{Spacer.displayName="Spacer",Spacer.__docgenInfo={description:"",displayName:"Spacer",props:{size:{defaultValue:null,description:"Sizes:\n- xxs: 5px\n- xs: 10px\n- s: 20px\n- m: 30px\n- l: 60px\n- xl: 90px\n- xxl: 180px",name:"size",required:!0,type:{name:"enum",value:[{value:'"s"'},{value:'"xxs"'},{value:'"xs"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:'"xxl"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/spacer/spacer.tsx#Spacer"]={docgenInfo:Spacer.__docgenInfo,name:"Spacer",path:"src/spacer/spacer.tsx#Spacer"})}catch(__react_docgen_typescript_loader_error){}}}]);