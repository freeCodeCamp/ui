"use strict";(self.webpackChunk_freecodecamp_ui=self.webpackChunk_freecodecamp_ui||[]).push([[378],{"./src/prism-formatted/prism-formatted.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Collapsible:()=>Collapsible,Default:()=>Default,InsideDisclosureElement:()=>InsideDisclosureElement,WithLineNumbers:()=>WithLineNumbers,WithLongLineOfCode:()=>WithLongLineOfCode,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/index.js");const story={title:"Components/PrismFormatted",component:__webpack_require__("./src/prism-formatted/prism-formatted.tsx").C},text='<p>Given the following code:</p>\n<pre><code class="language-python">temp = "5 degrees"\ncel = 0\nfahr = float(temp)\ncel = (fahr - 32.0) * 5.0 / 9.0\nprint(cel)\n</code></pre>\n<p>Which line/lines should be surrounded by <code>try</code> block?</p>',Default={args:{text,getCodeBlockAriaLabel:codeName=>`${codeName} code example`},parameters:{docs:{source:{code:'<PrismFormatted\n  getCodeBlockAriaLabel={codeName => `${codeName} code example`}\n  text="<p>Given the following code:</p>\n    <pre><code class=&quot;language-python&quot;>temp = &quot;5 degrees&quot;\n    cel = 0\n    fahr = float(temp)\n    cel = (fahr - 32.0) * 5.0 / 9.0\n    print(cel)\n    </code></pre>\n    <p>Which line/lines should be surrounded by <code>try</code> block?</p>"\n/>'}}}},WithLineNumbers={args:{text,getCodeBlockAriaLabel:codeName=>`${codeName} code example`,hasLineNumbers:!0},parameters:{docs:{source:{code:'<PrismFormatted\n  hasLineNumbers\n  getCodeBlockAriaLabel={codeName => `${codeName} code example`}\n  text="<p>Given the following code:</p>\n    <pre><code class=&quot;language-python&quot;>temp = &quot;5 degrees&quot;\n    cel = 0\n    fahr = float(temp)\n    cel = (fahr - 32.0) * 5.0 / 9.0\n    print(cel)\n    </code></pre>\n    <p>Which line/lines should be surrounded by <code>try</code> block?</p>"\n/>'}}}},WithLongLineOfCode={args:{text:'<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>',getCodeBlockAriaLabel:codeName=>`${codeName} code example`},parameters:{docs:{source:{code:'<PrismFormatted\n  getCodeBlockAriaLabel={codeName => `${codeName} code example`}\n  text={`<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>`}\n/>'}}}},InsideDisclosureElement={decorators:[Story=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("details",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("summary",{className:"text-foreground-primary"},"Example code"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null))],args:{text:'<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code when it\'s rendered inside a disclosure element. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>',getCodeBlockAriaLabel:codeName=>`${codeName} code example`},parameters:{docs:{description:{story:"This story shows how PrismFormatted displays a long line of code when it's rendered inside a disclosure element. The text content should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view."},source:{code:'<details>\n  <summary>Example code</summary>\n\n  <PrismFormatted\n    getCodeBlockAriaLabel={codeName => `${codeName} code example`}\n    text={`<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code when it\'s rendered inside a disclosure element. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>`}\n    />\n</details>'}}}},Collapsible={args:{text:'<section><p>An <code>if</code> statement allows you to run a block of code only when a condition is met. It uses the following syntax:</p><pre><code class="language-js">if (condition) {\n  logic\n}</code></pre></section>',getCodeBlockAriaLabel:codeName=>`${codeName} code example`,isCollapsible:!0,disclosureLabel:"Example"},parameters:{docs:{source:{code:'<PrismFormatted\n  isCollapsible\n  disclosureLabel="Example"\n  getCodeBlockAriaLabel={codeName => `${codeName} code example`}\n  text={`<section><p>An <code>if</code> statement allows you to run a block of code only when a condition is met. It uses the following syntax:</p><pre><code class="language-js">if (condition) {\n  logic\n  }</code></pre></section>`}\n/>'}}}},__WEBPACK_DEFAULT_EXPORT__=story,__namedExportsOrder=["Default","WithLineNumbers","WithLongLineOfCode","InsideDisclosureElement","Collapsible"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    text,\n    getCodeBlockAriaLabel: codeName => `${codeName} code example`\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `<PrismFormatted\n  getCodeBlockAriaLabel={codeName => \\`\\${codeName} code example\\`}\n  text="<p>Given the following code:</p>\n    <pre><code class=&quot;language-python&quot;>temp = &quot;5 degrees&quot;\n    cel = 0\n    fahr = float(temp)\n    cel = (fahr - 32.0) * 5.0 / 9.0\n    print(cel)\n    </code></pre>\n    <p>Which line/lines should be surrounded by <code>try</code> block?</p>"\n/>`\n      }\n    }\n  }\n}',...Default.parameters?.docs?.source}}},WithLineNumbers.parameters={...WithLineNumbers.parameters,docs:{...WithLineNumbers.parameters?.docs,source:{originalSource:'{\n  args: {\n    text,\n    getCodeBlockAriaLabel: codeName => `${codeName} code example`,\n    hasLineNumbers: true\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `<PrismFormatted\n  hasLineNumbers\n  getCodeBlockAriaLabel={codeName => \\`\\${codeName} code example\\`}\n  text="<p>Given the following code:</p>\n    <pre><code class=&quot;language-python&quot;>temp = &quot;5 degrees&quot;\n    cel = 0\n    fahr = float(temp)\n    cel = (fahr - 32.0) * 5.0 / 9.0\n    print(cel)\n    </code></pre>\n    <p>Which line/lines should be surrounded by <code>try</code> block?</p>"\n/>`\n      }\n    }\n  }\n}',...WithLineNumbers.parameters?.docs?.source}}},WithLongLineOfCode.parameters={...WithLongLineOfCode.parameters,docs:{...WithLongLineOfCode.parameters?.docs,source:{originalSource:'{\n  args: {\n    text: `<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>`,\n    getCodeBlockAriaLabel: codeName => `${codeName} code example`\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `<PrismFormatted\n  getCodeBlockAriaLabel={codeName => \\`\\${codeName} code example\\`}\n  text={\\`<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>\\`}\n/>`\n      }\n    }\n  }\n}',...WithLongLineOfCode.parameters?.docs?.source}}},InsideDisclosureElement.parameters={...InsideDisclosureElement.parameters,docs:{...InsideDisclosureElement.parameters?.docs,source:{originalSource:'{\n  decorators: [Story => <details>\n                <summary className="text-foreground-primary">Example code</summary>\n                <Story />\n            </details>],\n  args: {\n    text: `<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code when it\'s rendered inside a disclosure element. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>`,\n    getCodeBlockAriaLabel: codeName => `${codeName} code example`\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "This story shows how PrismFormatted displays a long line of code when it\'s rendered inside a disclosure element. The text content should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view."\n      },\n      source: {\n        code: `<details>\n  <summary>Example code</summary>\n\n  <PrismFormatted\n    getCodeBlockAriaLabel={codeName => \\`\\${codeName} code example\\`}\n    text={\\`<pre><code class="language-html"><p>This story shows how PrismFormatted displays a long line of code when it\'s rendered inside a disclosure element. This line should not wrap to a new line, but instead, the overflow content is clipped and can be scrolled into view.</p></code></pre>\\`}\n    />\n</details>`\n      }\n    }\n  }\n}',...InsideDisclosureElement.parameters?.docs?.source}}},Collapsible.parameters={...Collapsible.parameters,docs:{...Collapsible.parameters?.docs,source:{originalSource:'{\n  args: {\n    text: `<section><p>An <code>if</code> statement allows you to run a block of code only when a condition is met. It uses the following syntax:</p><pre><code class="language-js">if (condition) {\n  logic\n}</code></pre></section>`,\n    getCodeBlockAriaLabel: codeName => `${codeName} code example`,\n    isCollapsible: true,\n    disclosureLabel: "Example"\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `<PrismFormatted\n  isCollapsible\n  disclosureLabel="Example"\n  getCodeBlockAriaLabel={codeName => \\`\\${codeName} code example\\`}\n  text={\\`<section><p>An <code>if</code> statement allows you to run a block of code only when a condition is met. It uses the following syntax:</p><pre><code class="language-js">if (condition) {\n  logic\n  }</code></pre></section>\\`}\n/>`\n      }\n    }\n  }\n}',...Collapsible.parameters?.docs?.source}}}}}]);